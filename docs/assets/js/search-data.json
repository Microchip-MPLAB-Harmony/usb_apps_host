{"0": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products. (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \"Third Party\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/usb_apps_host/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "HID Basic Keyboard Example",
    "title": "HID Basic Keyboard Example (hid_basic_keyboard)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Host HID Client Driver to support to enumerate and operate a HID keyboard device. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_keyboard/readme.html#hid-basic-keyboard-example-hid_basic_keyboard",
    "relUrl": "/apps/hid_basic_keyboard/readme.html#hid-basic-keyboard-example-hid_basic_keyboard"
  },"2": {
    "doc": "HID Basic Keyboard Example",
    "title": "Description",
    "content": "This application creates a USB Host application that uses the USB Host Layer, HID Client driver and HID Keyboard Usage driver to enumerate a USB keyboard and understand keyboard press release events. The keyboard events are displayed using a terminal emulator on a personal computer. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_keyboard/readme.html#description",
    "relUrl": "/apps/hid_basic_keyboard/readme.html#description"
  },"3": {
    "doc": "HID Basic Keyboard Example",
    "title": " Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_host/apps/hid_basic_keyboard. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_g55_xpro.X | MPLABX | ATSAMG55J19 | SAM G55 Xplained Pro Board | . | sam_g55_xpro_freertos.X | MPLABX | ATSAMG55J19 | SAM G55 Xplained Pro Board | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_keyboard/readme.html#-downloading-and-building-the-application",
    "relUrl": "/apps/hid_basic_keyboard/readme.html#-downloading-and-building-the-application"
  },"4": {
    "doc": "HID Basic Keyboard Example",
    "title": " Configuring the Hardware",
    "content": "SAM D21 Xplained Pro Board . | Jumper titled “PA03 SELECT” must be shorted between PA03 and USB_ID(positions 2 and 3) | Use “TARGET USB” connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 on the board is controlled by the attached USB CDC device. | . SAM E70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and LED2(positions 1 and 2). | Use “TARGET USB” J200 connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED3 on the board is controlled by the attached USB CDC device. | . SAMG55 Xplained Pro Board . | Chip Erase Jumper must be open. | Use TARGET USB connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 on the board is controlled by the attached USB CDC device. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_keyboard/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_basic_keyboard/readme.html#-configuring-the-hardware"
  },"5": {
    "doc": "HID Basic Keyboard Example",
    "title": "Running the Application",
    "content": ". | Open the project with appropriate IDE. Compile the project and program the target device. | Connect the serial interface on the board to a PC. On the PC, launch a terminal emulator, such as Tera Term, and select the appropriate COM port and set the serial port settings to 115200-N-1. | If a USB keyboard is not connected to the Embedded USB Host, the terminal emulator window will show the Connect Keyboard prompt. | Attach a USB keyboard to the Host connector of the target hardware. The message, Keyboard Connected, will appear in the terminal emulator window. Refer to the Configuring the Hardware section for any converter requirements. | Begin typing on the keyboard and the appropriate keys should be displayed on the serial terminal. Subsequent press and release of modifier keys (i.e., CAPS LOCK, NUM LOCK, etc.) will result in the appropriate keyboard LEDs to turning ON and OFF. | Disconnecting the keyboard will result in the message, Connect Keyboard. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_keyboard/readme.html#running-the-application",
    "relUrl": "/apps/hid_basic_keyboard/readme.html#running-the-application"
  },"6": {
    "doc": "HID Basic Keyboard Example",
    "title": "HID Basic Keyboard Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_keyboard/readme.html",
    "relUrl": "/apps/hid_basic_keyboard/readme.html"
  },"7": {
    "doc": "HID Basic Mouse USART Example",
    "title": "HID Basic Mouse USART Example (hid_basic_mouse_usart)",
    "content": "This application demonstrates the use of the USB HID Host Client Driver to enumerate and operate a HID USB Mouse device. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_mouse_usart/readme.html#hid-basic-mouse-usart-example-hid_basic_mouse_usart",
    "relUrl": "/apps/hid_basic_mouse_usart/readme.html#hid-basic-mouse-usart-example-hid_basic_mouse_usart"
  },"8": {
    "doc": "HID Basic Mouse USART Example",
    "title": "Description",
    "content": "This application uses the USB Host layer, HID Client driver and HID Mouse Usage driver to enumerate a USB Mouse and detect Mouse button press release events. The Mouse events are displayed using a terminal emulator on a personal computer. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_mouse_usart/readme.html#description",
    "relUrl": "/apps/hid_basic_mouse_usart/readme.html#description"
  },"9": {
    "doc": "HID Basic Mouse USART Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_host/apps/hid_basic_mouse_usart. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_freertos_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult_iar.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_a5d2_xult_freertos.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_g55_xpro.X | MPLABX | ATSAMG55J19 | SAM G55 Xplained Pro Board | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_mouse_usart/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hid_basic_mouse_usart/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "HID Basic Mouse USART Example",
    "title": " Configuring the Hardware",
    "content": "SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin)into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | . | Connect the USB port J22 on board to the computer using a micro USB cable (to enable debug com port). | Jumpers J20, J21 and J13 must be open. | Jumper J2 and J3 must be shorted. | Use USB Type A connector (J8) on the board to connect the USB Device to the USB Host. | LED D1 indicates a Device Connection. (Attached device has been successfully enumerated and configured). | Connect J7 to a available USB Host Port to power up the board. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAM A5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) and generated application binary (harmony.bin)into the SD card | Insert the SD card into the SDMMC1 slot on the board | . | Open the jumper JP2(DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Use “A5-USB-B” connector(J13 - Type A connector) on the board to connect the USB Device to the USB Host. | RGB LED indicates a Device Connection. (Attached device has been successfully enumerated and configured). | A commercially available USB Mouse will be needed. | The demonstration uses the EDBG Serial Interface to transfer demonstration application messages on a PC. | . SAM D21 Xplained Pro Board . | Jumper titled “PA03 SELECT” must be shorted between PA03 and USB_ID(positions 2 and 3) | Use “TARGET USB” connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 indicates a Device Connection. (Attached device has been successfully enumerated and configured). This LED is also toggled on Mouse Button press event. | A commercially available USB Mouse will be needed. | The demonstration uses the EDBG Serial Interface to transfer demonstration application messages on a PC. | . SAM E70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and LED2(positions 1 and 2). | Use “TARGET USB” J200 connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED3 indicates a Device Connection. (Attached device has been successfully enumerated and configured). This LED is also toggled on Mouse Button press event. | A commercially available USB Mouse will be needed. | The demonstration uses the EDBG Serial Interface to transfer demonstration application messages on a PC. | . SAMG55 Xplained Pro Board . | Chip Erase Jumper must be open. | Use TARGET USB connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 indicates a Device Connection. (Attached device has been successfully enumerated and configured). This LED is also toggled on Mouse Button press event. | A commercially available USB Mouse will be needed. | The demonstration uses the EDBG Serial Interface to transfer demonstration application messages on a PC. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_mouse_usart/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_basic_mouse_usart/readme.html#-configuring-the-hardware"
  },"11": {
    "doc": "HID Basic Mouse USART Example",
    "title": "Running the Application",
    "content": ". | Open the project with appropriate IDE. Compile the project and program the target device. | Launch a terminal emulator, such as Tera Term. Select the appropriate COM port and set the serial port settings to 115200-N-1. | If a USB mouse is not connected to the Host connector, the serial terminal emulator window will show the “Connect Mouse” prompt. | Attach a USB mouse to the Host connector of the target hardware. Refer to the Configuring the Hardware section for any converter requirements. The message, “Mouse Connected”, will display in the serial terminal emulator window. | Begin moving the mouse and the appropriate relative coordinate changes for X,Y, and Z axes should be displayed in the serial terminal window. | Click the mouse button to toggle LEDs on the board. Refer to the Configuring the Hardware section for details on the relevant LED. | Disconnecting the mouse will result in the message, “Connect Mouse”, to reappear on the serial console. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_mouse_usart/readme.html#running-the-application",
    "relUrl": "/apps/hid_basic_mouse_usart/readme.html#running-the-application"
  },"12": {
    "doc": "HID Basic Mouse USART Example",
    "title": "HID Basic Mouse USART Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_host/apps/hid_basic_mouse_usart/readme.html",
    "relUrl": "/apps/hid_basic_mouse_usart/readme.html"
  },"13": {
    "doc": "HUB CDC HID Example",
    "title": "HUB CDC HID Example (hub_cdc_hid)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Host Stack to access and manage multiple USB Devices through a Hub. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_cdc_hid/readme.html#hub-cdc-hid-example-hub_cdc_hid",
    "relUrl": "/apps/hub_cdc_hid/readme.html#hub-cdc-hid-example-hub_cdc_hid"
  },"14": {
    "doc": "HUB CDC HID Example",
    "title": "Description",
    "content": "This application creates a USB Host that can recognize and enumerate a CDC Emulator USB Device and a HID USB Mouse connected via an external Hub. The host will demonstrate the communication from the CDC emulator device and the HID mouse. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_cdc_hid/readme.html#description",
    "relUrl": "/apps/hub_cdc_hid/readme.html#description"
  },"15": {
    "doc": "HUB CDC HID Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_host/apps/hub_cdc_hid. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_cdc_hid/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hub_cdc_hid/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "HUB CDC HID Example",
    "title": " Configuring the Hardware",
    "content": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Connect the USB Hub to the Type A connector J5, which is located on the top side of the starter kit. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_cdc_hid/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hub_cdc_hid/readme.html#-configuring-the-hardware"
  },"17": {
    "doc": "HUB CDC HID Example",
    "title": "Running the Application",
    "content": "This application demonstrates the capability of the USB Host Stack to access and manage multiple USB Devices through a Hub. The demonstration application enumerates a HID mouse and CDC emulator device via an external hub. The host will demonstrate the communication from the CDC emulator device and the HID mouse. Open the project in MPLAB X IDE and select the desired project configuration. | Build the code and program the device. | Connect a hub to the Type A Host connector(J5) on the desired board. | Connect a mouse to a spare port on the hub. | Connect the CDC emulator device to another spare port on the hub. Follow the directions for setting up and running the cdc_serial_emulator USB device demonstration. On the personal computer, open a serial terminal and set the serial Baudrate to 9600. | At the prompt, (LED:), enter 1, 2, or 3 to toggle the corresponding LEDs on the starter kit. | Click the mouse Left and Right buttons. This will toggle LED on the demo board. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_cdc_hid/readme.html#running-the-application",
    "relUrl": "/apps/hub_cdc_hid/readme.html#running-the-application"
  },"18": {
    "doc": "HUB CDC HID Example",
    "title": "HUB CDC HID Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_cdc_hid/readme.html",
    "relUrl": "/apps/hub_cdc_hid/readme.html"
  },"19": {
    "doc": "HUB MSD Example",
    "title": "HUB MSD Example (hub_msd)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Host Stack to interact with more than one USB Mass Storage Device through a Hub. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_msd/readme.html#hub-msd-example-hub_msd",
    "relUrl": "/apps/hub_msd/readme.html#hub-msd-example-hub_msd"
  },"20": {
    "doc": "HUB MSD Example",
    "title": "Description",
    "content": "This application uses USB Host stack and the Harmony Filesystem Service to copy a file from a source USB pen drive to a target USB pen drive. ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_msd/readme.html#description",
    "relUrl": "/apps/hub_msd/readme.html#description"
  },"21": {
    "doc": "HUB MSD Example",
    "title": " Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_host/apps/hub_msd. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_freertos_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult_iar.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_a5d2_xult_freertos.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro Board | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_msd/readme.html#-downloading-and-building-the-application",
    "relUrl": "/apps/hub_msd/readme.html#-downloading-and-building-the-application"
  },"22": {
    "doc": "HUB MSD Example",
    "title": " Configuring the Hardware",
    "content": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Connect the USB Hub to the Type A connector J5, which is located on the top side of the starter kit. | LED1 on the demonstration board will illuminate to indicate completion of the file transfer. | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin)into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | . | Connect the USB port J22 on board to the computer using a micro USB cable (to enable debug com port). | Jumpers J20, J21 and J13 must be open. | Jumper J2 and J3 must be shorted. | Use USB Type A connector (J8) on the board to connect the USB Device to the USB Host. | LED D1 on the demonstration board will illuminate to indicate completion of the file transfer. | Connect J7 to a available USB Host Port to power up the board. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAM A5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) and generated application binary (harmony.bin)into the SD card | Insert the SD card into the SDMMC1 slot on the board | . | Connect the Debug USB port on the board to the computer using a micro USB cable | Use “A5-USB-B” connector(J13 - Type A connector) on the board to connect the USB Device to the USB Host. | LED D1 on the demonstration board will illuminate to indicate completion of the file transfer | . SAM D21 Xplained Pro Board . | Connect the Debug USB port on the board to the computer using a micro USB cable | Jumper titled “PA03 SELECT” must be shorted between PA03 and USB_ID(positions 2 and 3) | Use “TARGET USB” connector on the board to connect the USB Device to the the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 on the demonstration board will illuminate to indicate completion of the file transfer. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_msd/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hub_msd/readme.html#-configuring-the-hardware"
  },"23": {
    "doc": "HUB MSD Example",
    "title": "Running the Application",
    "content": "This application demonstrates the capability of the USB Host Stack to access and manage multiple USB Devices through a Hub. The demonstration application copies a file from one USB pen drive (i.e.,a USB Flash storage device) to another USB pen drive, where these pen drives are attached to a hub. | Open the project in the MPLAB X IDE or IAR. Refer to Building the Application section for available demo projects. | Build the code and program the device. | Connect a hub to the Host connector on the desired board. | Connect a USB Pen drive containing an arbitrary file named “file.txt” to a spare port on the hub. | Connect another USB pen drive to another spare port on the hub. | The application will copy the file “file.txt” from the drive containing this file to the other drive. The copied file will be renamed as “newfile.txt”. LED on the demonstration board will illuminate to indicate completion of the file transfer. | Disconnect the drives and confirm demonstration success by inserting them into a personal computer and verifying the file transfer completed as expected. | The demonstration application will always be in state where it waits for two pen drives to be connected to the hub and at least one of these pen drives contains a file named “file.txt”. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_msd/readme.html#running-the-application",
    "relUrl": "/apps/hub_msd/readme.html#running-the-application"
  },"24": {
    "doc": "HUB MSD Example",
    "title": "HUB MSD Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_host/apps/hub_msd/readme.html",
    "relUrl": "/apps/hub_msd/readme.html"
  },"25": {
    "doc": "MSD Basic Example",
    "title": "MSD Basic Example (msd_basic)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Host Stack to support MSD Host Class Driver . It demonstrates the feature with an application to read / write a file to a USB Flash drive. ",
    "url": "http://localhost:4000/usb_apps_host/apps/msd_basic/readme.html#msd-basic-example-msd_basic",
    "relUrl": "/apps/msd_basic/readme.html#msd-basic-example-msd_basic"
  },"26": {
    "doc": "MSD Basic Example",
    "title": "Description",
    "content": "This application demonstrates the use of the MSD Host Class Driver to write a file to a USB Flash drive. The application uses the USB Host_layer , MSD class driver and the MPLAB Harmony File System Framework to enumerate a USB Flash drive and to write a file to it. ",
    "url": "http://localhost:4000/usb_apps_host/apps/msd_basic/readme.html#description",
    "relUrl": "/apps/msd_basic/readme.html#description"
  },"27": {
    "doc": "MSD Basic Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_host/apps/msd_basic. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mk_gp_db.X | MPLABX | PIC32MK1024GPE100 | PIC32MK General Purpose (GP) Development Board | . | pic32mk_gp_db_freertos.X | MPLABX | PIC32MK1024GPE100 | PIC32MK General Purpose (GP) Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mx470_curiosity_freertos.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mz_das_sk.X | MPLABX | PIC32MZ2064DAS169 | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit | . | pic32mz_ef_curiosity_2.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_ef_sk_freertos.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_w1_curiosity.X | MPLABX | PIC32MZ1025W104132 | Curiosity PIC32MZ W1 Development Board | . | sam_9x60_ek.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_freertos_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult_iar.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_a5d2_xult_freertos_iar.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro Board | . | sam_d21_xpro_iar.IAR | IAR | ATSAMD21J18A | SAM D21 Xplained Pro Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAM E54 Xplained Pro Board | . | sam_e54_xpro_iar.IAR | IAR | ATSAME54P20A | SAM E54 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_iar.IAR | IAR | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_g55_xpro.X | MPLABX | ATSAMG55J19 | SAM G55 Xplained Pro Board | . | sam_g55_xpro_freertos.X | MPLABX | ATSAMG55J19 | SAM G55 Xplained Pro Board | . | sam_l21_xpro.X | MPLABX | ATSAML21J18B | SAM L21 Xplained Pro Board | . | sam_v71_xult_freertos.X | MPLABX | ATSAMV71Q21B | SAM V71 Xplained Ultra board | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/msd_basic/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/msd_basic/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "MSD Basic Example",
    "title": " Configuring the Hardware",
    "content": "PIC32MK General Purpose (GP) Development Board . | Connect the device to the Type A connector J5, which is located on the top side of the starter kit. | LED1 indicates the file write is complete. | . PIC32MX Curiosity Development Board . | Connect the device to theUSB micro-B port J12, which is located on the top side of the starter kit. | LED1 indicates the file write is complete. | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit . | Connect the device to the Type A connector J7, which is located on the top side of the starter kit. | LED1 indicates the file write is complete. | . Curiosity PIC32MZ EF 2.0 Development Board . | Use “TARGET USB” connector (J201) on the board to connect the USB Device to the the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED1 indicates the file write is complete. | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Connect the device to the Type A connector J5, which is located on the top side of the starter kit. | LED1 indicates the file write is complete. | . Curiosity PIC32MZ W1 Development Board . | Jumper J205 must be shorted. | Connect the device to the Type A connector J204. | The LED D204 indicates the file write is complete. | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin)into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | . | Connect the USB port J22 on board to the computer using a micro USB cable (to enable debug com port). | Jumpers J20, J21 and J13 must be open. | Jumper J2 and J3 must be shorted. | Use USB Type A connector (J8) on the board to connect the USB Device to the USB Host. | LED D1 indicates indicates the file write is complete. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAM A5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary( boot.bin) and generated application binary (harmony.bin)into the SD card. | Insert the SD card into the SDMMC1 slot on the board. | . | Connect the Debug USB port on the board to the computer using a micro USB cable. | Use “A5-USB-B” connector(J13 - Type A connector) on the board to connect the USB Device to the the USB Host. | RGB LED turning to Green indicates the file write is complete. | . SAM D21 Xplained Pro Board . | Jumper titled “PA03 SELECT” must be shorted between PA03 and USB_ID(positions 2 and 3). | Use “TARGET USB” connector on the board to connect the USB Device to the the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 indicates the file write is complete. | . SAM E54 Xplained Pro Board . | Use “TARGET USB” connector on the board to connect the USB Device to the the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 indicates the file write is complete. | . SAM E70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and LED2(positions 1 and 2). | Use TARGET USB J200 connector on the board to connect the USB Device to the the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED3 indicates the file write is complete. | . SAMG55 Xplained Pro Board . | Chip Erase Jumper must be open. | Use TARGET USB connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 indicates the file write is complete. | . SAM L21 Xplained Pro Board . | Use “TARGET USB” connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 indicates the file write is complete. | . SAM V71 Xplained Ultra Board . | Jumper titled “USB VBUS” must be shorted between PC09 and LED1(positions 1 and 2) | Use TARGET USB connector on the board to connect the USB Device to the the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 indicates the file write is complete. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/msd_basic/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/msd_basic/readme.html#-configuring-the-hardware"
  },"29": {
    "doc": "MSD Basic Example",
    "title": "Running the Application",
    "content": "This application demonstrates the use of the MSD Host Class Driver to write a file to USB Flash drive. The application uses the USB Host_layer, MSD class driver and the MPLAB Harmony File System Framework to enumerate a USB Flash drive and to write a file to it. | Open the project with appropriate IDE. Compile the project and program the target device. | With the code running, attach a USB Flash drive to the Host connector on the desired starter kit. | The demonstration application will then create a file named file.txt. It will then write the text “Hello World” to this file, and then close the file. | The LED on the selected hardware will indicate the status of the operation. Refer to the Configuring the Hardware instruction for details. | The USB Flash drive can then be attached to a USB Host personal computer to verify the demonstration application operation. | Steps 3 through 6 can be repeated. | If the USB Flash drive already contains a file with the name file.txt, the demonstration application will append the text “Hello World” to the end of the file contents. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/msd_basic/readme.html#running-the-application",
    "relUrl": "/apps/msd_basic/readme.html#running-the-application"
  },"30": {
    "doc": "MSD Basic Example",
    "title": "MSD Basic Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_host/apps/msd_basic/readme.html",
    "relUrl": "/apps/msd_basic/readme.html"
  },"31": {
    "doc": "CDC MSD Example",
    "title": "CDC MSD Example (cdc_msd)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Host Stack to support more than one device type in a USB Host Application. ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_msd/readme.html#cdc-msd-example-cdc_msd",
    "relUrl": "/apps/cdc_msd/readme.html#cdc-msd-example-cdc_msd"
  },"32": {
    "doc": "CDC MSD Example",
    "title": "Description",
    "content": "This application creates a USB Host that can recognize and enumerate a CDC USB Device and MSC USB Device . ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_msd/readme.html#description",
    "relUrl": "/apps/cdc_msd/readme.html#description"
  },"33": {
    "doc": "CDC MSD Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_host/apps/cdc_msd. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_msd/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cdc_msd/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "CDC MSD Example",
    "title": " Configuring the Hardware",
    "content": "SAM D21 Xplained Pro Board . | Jumper titled “PA03 SELECT” must be shorted between PA03 and USB_ID(positions 2 and 3). | Use “TARGET USB” connector on the board to connect the USB Device to the USB Host PC. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 on the board is controlled by the attached USB CDC device when a CDC device is attached. When a Mass Storage Device is attached, it indicates file write completion. | . SAM E70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and LED2(positions 1 and 2). | LED2 indicates a Device Connection. (Attached device has been successfully enumerated and configured). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED3 on the board is controlled by the attached USB CDC device when a CDC device is attached. When a Mass Storage Device is attached, it indicates file write completion. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_msd/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_msd/readme.html#-configuring-the-hardware"
  },"35": {
    "doc": "CDC MSD Example",
    "title": "Running the Application",
    "content": "This demonstration application creates a USB Host application that enumerates a CDC and a MSD Host. This application combines the functionality of the Host cdc_basic and msd_basic demonstration applications into one application. If a CDC device is connected, the demonstration application behaves like the cdc_basic host application. If a MSD device is connected, the demonstration application behaves like the msd_basic host application. To exercise the CDC Host capabilities, refer to local documentation from usb_apps_host/apps/cdc_basic. The documentation is also available in the github path usb_apps_host/apps/cdc_basic. To exercise the MSD Host capabilities, refer to local documentation from usb_apps_host/apps/msd_basic. The documentation is also available in the github path usb_apps_host/apps/msd_basic. ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_msd/readme.html#running-the-application",
    "relUrl": "/apps/cdc_msd/readme.html#running-the-application"
  },"36": {
    "doc": "CDC MSD Example",
    "title": "CDC MSD Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_msd/readme.html",
    "relUrl": "/apps/cdc_msd/readme.html"
  },"37": {
    "doc": "CDC Basic Example",
    "title": "CDC Basic Example (cdc_basic)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Host Stack CDC Client Driver to enumerate and operate a standard CDC USB Device. ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_basic/readme.html#cdc-basic-example-cdc_basic",
    "relUrl": "/apps/cdc_basic/readme.html#cdc-basic-example-cdc_basic"
  },"38": {
    "doc": "CDC Basic Example",
    "title": "Description",
    "content": "This application uses the USB Host Layer and CDC Client driver to enumerate a standard CDC USB device. The demonstration host application then operates and uses the functionality of the attached CDC Device. ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_basic/readme.html#description",
    "relUrl": "/apps/cdc_basic/readme.html#description"
  },"39": {
    "doc": "CDC Basic Example",
    "title": " Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_host/apps/cdc_basic. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_ef_sk_freertos.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_freertos_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult_iar.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_a5d2_xult_freertos_iar.IAR | IAR | ATSAMA5D27C | SAM A5D2 Xplained Ultra Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAM E54 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_g55_xpro.X | MPLABX | ATSAMG55J19 | SAM G55 Xplained Pro Board | . | sam_g55_xpro_freertos.X | MPLABX | ATSAMG55J19 | SAM G55 Xplained Pro Board | . | sam_v71_xult_freertos.X | MPLABX | ATSAMV71Q21B | SAM V71 Xplained Ultra board | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_basic/readme.html#-downloading-and-building-the-application",
    "relUrl": "/apps/cdc_basic/readme.html#-downloading-and-building-the-application"
  },"40": {
    "doc": "CDC Basic Example",
    "title": " Configuring the Hardware",
    "content": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Connect the device to the Type A connector J5, which is located on the top side of the starter kit. | LED1 on the board is controlled by the attached USB CDC device. | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin)into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | . | Connect the USB port J22 on board to the computer using a micro USB cable (to enable debug com port). | Jumpers J20, J21 and J13 must be open. | Jumper J2 and J3 must be shorted. | Use USB Type A connector (J8) on the board to connect the USB Device to the USB Host. | LED D1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Connect J7 to a available USB Host Port to power up the board. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAM A5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary( boot.bin) and generated application binary (harmony.bin)into the SD card. | Insert the SD card into the SDMMC1 slot on the board. | . | Connect the Debug USB port on the board to the computer using a micro USB cable. | Use “A5-USB-B” connector(J13 - Type A connector) on the board to connect the USB Device to the USB Host. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAM D21 Xplained Pro Board . | Jumper titled “PA03 SELECT” must be shorted between PA03 and USB_ID(positions 2 and 3) | Use “TARGET USB” connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 on the board is controlled by the attached USB CDC device. | . SAM E54 Xplained Pro Board . | Use “TARGET USB” connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 on the board is controlled by the attached USB CDC device. | . SAM E70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and LED2(positions 1 and 2). | Use “TARGET USB” J200 connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED3 on the board is controlled by the attached USB CDC device. | . SAMG55 Xplained Pro Board . | Chip Erase Jumper must be open. | Use TARGET USB connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED0 on the board is controlled by the attached USB CDC device. | . SAM V71 Xplained Ultra board . | Jumper titled “USB VBUS” must be shorted between PC09 and LED1(positions 1 and 2) | Use “TARGET USB” connector on the board to connect the USB Device to the USB Host. A USB micro AB to type A USB Host receptacle converter will be needed to connect the device. | LED1 on the board is controlled by the attached USB CDC device. | . ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_basic/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_basic/readme.html#-configuring-the-hardware"
  },"41": {
    "doc": "CDC Basic Example",
    "title": "Running the Application",
    "content": "This application demonstrates the use of the CDC Host Client Driver to enumerate and operate a CDC USB Device. The application uses the USB Host Layer and CDC Client driver to enumerate a CDC USB device. The demonstration host application then operates and uses the functionality of the attached CDC Device. | Open_the project corresponding to the selected board. Refer to the Building the Application section for details. | Build the code and program the device. | Follow the directions for setting up and running the cdc_serial_emulator USB device demonstration. Start a terminal program on the USB Host personal computer and select the Serial-to-USB Dongle as the communication port. Select the baud rate as 9600, no parity, 1 Stop bit, and no flow control. | Connect the USB Device connector of the CDC USB Device board to the USB Host Target board. Refer to the Configuring the Hardware section for any converter requirements. | A prompt (LED :) will be displayed immediately on the terminal emulation program. | Pressing the 1 key on the USB Host keyboard will cause the LED on the Host USB board to switch on. Refer to the Configuring the Hardware section for details on the relevant LED. Pressing any other key at the prompt message will cause the LED to switch off. | The prompt will again be displayed on the terminal emulation program, and step 7 can be repeated. | Ensure that the CDC serial emulator device is completely powered off before detaching and reattaching to the embedded CDC host. | . In the below setup, the USB Device Board emulates a CDC USB-to-Serial Dongle. The USB Host Board (running the cdc_basic demonstration application) sends the prompt message to the CDC device. The CDC device forwards the prompt to the UART port from where it is transmitted to the PC USB Host through the USB serial interface. A key press on the PC USB Host is transmitted to the CDC device, which in turn presents the key press data to the CDC host. The cdc_basic demonstration then analyzes the key press data and switches on the respective LED. ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_basic/readme.html#running-the-application",
    "relUrl": "/apps/cdc_basic/readme.html#running-the-application"
  },"42": {
    "doc": "CDC Basic Example",
    "title": "CDC Basic Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_host/apps/cdc_basic/readme.html",
    "relUrl": "/apps/cdc_basic/readme.html"
  },"43": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": "![Microchip logo](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_logo.png) ![Harmony logo small](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_mplab_harmony_logo_small.png) # Microchip MPLAB® Harmony 3 Release Notes ## Harmony 3 USB Host application examples v1.0.0 - Applications migrated from USB repository to this new application repository for USB Host examples ### Development kit and demo application support Following table provides number of USB Host examples available for different development kits. | Development Kits | MPLABx applications | IAR applications | ----------------- | ------------------- | ---------------- | [PIC32MK General Purpose (GP) Development Board](https://www.microchip.com/developmenttools/ProductDetails/dm320106) | 2 | 0 | [PIC32MX Curiosity Development Board](https://www.microchip.com/Developmenttools/ProductDetails/dm320103) | 2 | 0 | [PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/DM320010-C) | 1 | 0 | [Curiosity PIC32MZ EF 2.0 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/DM320209) | 1 | 0 | [PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit](https://www.microchip.com/Developmenttools/ProductDetails/DM320007) | 6 | 0 | [Curiosity PIC32MZ W1 Development Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320104) | 1 | 0 | [SAM9X60-EK Evaluation Board](https://www.microchip.com/developmenttools/ProductDetails/DT100126) | 1 | 8 | [SAM A5D2 Xplained Ultra Board](https://www.microchip.com/Developmenttools/ProductDetails/ATSAMA5D2C-XULT) | 0 | 8 | [SAM D11 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd11-xpro) | 0 | 0 | [SAM D21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd21-xpro) | 6 | 1 | [SAM DA1 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAMDA1-XPRO) | 0 | 0 | [SAM E54 Xplained Pro Board](https://www.microchip.com/developmenttools/productdetails/atsame54-xpro) | 2 | 1 | [SAM E70 Xplained Ultra Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320113) | 10 | 1 | [SAMG55 Xplained Pro Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMG55-XPRO) | 7 | 0 | [SAM L21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML21-XPRO-B) | 1 | 0 | [SAM L22 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML22-XPRO-B) | 0 | 0 | [SAM V71 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMV71-XULT) | 2 | 0 | ### New Features New features added in this release are as follows: - Applications migrated from USB repository to this new application repository for USB Host examples ### Known Issues The current known issues are as follows: - None ### Development Tools - [MPLAB® X IDE v5.45](https://www.microchip.com/mplab/mplab-x-ide) - MPLAB® X IDE plug-ins: - MPLAB® Harmony Configurator (MHC) v3.6.0 - [MPLAB® XC32 C/C++ Compiler v2.50](https://www.microchip.com/mplab/compilers) - [KEIL MDK v5.30 or above](https://www2.keil.com/mdk5) - [IAR Embedded workbench for ARM v8.50 or above](https://www.iar.com/iar-embedded-workbench/#!?architecture=Arm) ",
    "url": "http://localhost:4000/usb_apps_host/release_notes.html",
    "relUrl": "/release_notes.html"
  },"44": {
    "doc": "Harmony 3 USB Host application examples",
    "title": "Harmony 3 USB Host application examples",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 USB Host application examples MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 USB Host application examples. - [Release Notes](/usb_apps_host/release_notes.html) - [MPLAB® Harmony License](/usb_apps_host/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/usb_apps_host) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). # Contents Summary | Folder | Description | --- | --- | apps | Contains Harmony 3 USB Host application examples | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/usb_apps_host/) of this repository for viewing it online. | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of USB Host capabilities. | Name | Description | ------------------------- | ---------------------- | CDC Basic | This application uses the USB Host Layer and CDC Client driver to enumerate a standard CDC USB device. The demonstration host application then operates and uses the functionality of the attached CDC Device. | CDC MSD | This application creates a USB Host that can recognize and enumerate a CDC USB Device and MSC USB Device. | HID Basic Keyboard | This application creates a USB Host application that uses the USB Host Layer, HID Client driver and HID Keyboard Usage driver to enumerate a USB keyboard and understand keyboard press release events. The keyboard events are displayed using a terminal emulator on a personal computer. | HID Basic Mouse USART | This application uses the USB Host layer, HID Client driver and HID Mouse Usage driver to enumerate a USB Mouse and detect Mouse button press release events. The Mouse events are displayed using a terminal emulator on a personal computer. | HUB CDC HID | This application creates a USB Host that can recognize and enumerate a CDC Emulator USB Device and a HID USB Mouse connected via an external Hub. The host will demonstrate the communication from the CDC emulator device and the HID mouse. | HUB MSD | This application uses USB Host stack and the Harmony Filesystem Service to copy a file from a source USB pen drive to a target USB pen drive. | MSD Basic | This application demonstrates the use of the MSD Host Class Driver to write a file to a USB Flash drive. The application uses the USB Host_layer , MSD class driver and the MPLAB Harmony File System Framework to enumerate a USB Flash drive and to write a file to it. | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_host/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/usb_apps_host.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_host/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/usb_apps_host.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_host/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/usb_apps_host.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_host/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/usb_apps_host.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/usb_apps_host.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/usb_apps_host.svg?style=social)]() ",
    "url": "http://localhost:4000/usb_apps_host/",
    "relUrl": "/"
  }
}
